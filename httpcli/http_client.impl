
template <class ODataT>
HttpClientA<ODataT>::JobInfo::JobInfo(ODataT _userdata,
                                      const std::string &_postdata)
    : userdata(_userdata), success(false), postdata(_postdata) {}

template <class ODataT>
HttpClientA<ODataT>::HttpClientA(
    std::function<void(HttpClientA::JobInfo _ji)> _onCalled,
    HttpSettings _settings)
    : m_settings(_settings), m_onCalled(_onCalled), m_iskicking(false) {

  m_curl = curl_multi_init();
  curl_multi_timeout(m_curl, &m_settings.request_timeout_secs);
}

template <class ODataT> HttpClientA<ODataT>::~HttpClientA() {}

template <class ODataT>
void HttpClientA<ODataT>::call(ODataT _userdata, const std::string &_url) {

  CURL *e_curl = curl_easy_init();

  m_e_curls.insert(std::make_pair(e_curl, JobInfo(_userdata, "")));

  auto it = m_e_curls.find(e_curl);

  //	curl_easy_setopt(e_curl, CURLOPT_SHARE, m_curl_sh);
  curl_easy_setopt(e_curl, CURLOPT_URL, _url.c_str());
  curl_easy_setopt(e_curl, CURLOPT_WRITEFUNCTION, crawl_function_pt);
  curl_easy_setopt(e_curl, CURLOPT_WRITEDATA, &it->second.resp);
  curl_easy_setopt(e_curl, CURLOPT_ENCODING, s_curlopt_encoding.c_str());
  curl_easy_setopt(e_curl, CURLOPT_TIMEOUT, m_settings.request_timeout_secs);
  curl_easy_setopt(e_curl, CURLOPT_USERAGENT, m_settings.user_agent.c_str());

  curl_multi_add_handle(m_curl, e_curl);
}

template <class ODataT>
void HttpClientA<ODataT>::callPost(ODataT _userdata, const std::string &_url,
                                   const std::string &_postdata) {

  CURL *e_curl = curl_easy_init();

  m_e_curls.insert(std::make_pair(e_curl, JobInfo(_userdata, _postdata)));

  auto it = m_e_curls.find(e_curl);

  //	curl_easy_setopt(e_curl, CURLOPT_SHARE, m_curl_sh);
  curl_easy_setopt(e_curl, CURLOPT_URL, _url.c_str());
  curl_easy_setopt(e_curl, CURLOPT_WRITEFUNCTION, crawl_function_pt);
  curl_easy_setopt(e_curl, CURLOPT_WRITEDATA, &it->second.resp);

  curl_easy_setopt(e_curl, CURLOPT_ENCODING, s_curlopt_encoding.c_str());
  curl_easy_setopt(e_curl, CURLOPT_CUSTOMREQUEST, "POST");

  curl_easy_setopt(e_curl, CURLOPT_POST, 1);
  curl_easy_setopt(e_curl, CURLOPT_TIMEOUT, m_settings.request_timeout_secs);
  curl_easy_setopt(e_curl, CURLOPT_USERAGENT, m_settings.user_agent.c_str());
  curl_easy_setopt(e_curl, CURLOPT_POSTFIELDS, it->second.postdata.data());
  //	curl_easy_setopt(e_curl, CURLOPT_POSTFIELDS_SIZE,
  // it->second.postdata.size());

  curl_multi_add_handle(m_curl, e_curl);
}

template <class ODataT> void HttpClientA<ODataT>::performTransfers() {

  int nmsg;
  CURLMsg *msg; // = curl_multi_info_read(m_curl, &nmsg);

  while ((msg = curl_multi_info_read(m_curl, &nmsg))) {
    if (msg->msg == CURLMSG_DONE) {

      auto it = m_e_curls.find(msg->easy_handle);

      if (it != m_e_curls.end()) {

        if (msg->data.result == CURLE_OK) {
          it->second.success = true;
        } else {
          // std::cout << "curlerror: " << curl_easy_strerror(msg->data.result)
          //           << std::endl;
          it->second.curlerror = curl_easy_strerror(msg->data.result);
          it->second.success = false;
        }

        JobInfo ji = it->second;
        curl_multi_remove_handle(m_curl, it->first);
        curl_easy_cleanup(it->first);
        m_e_curls.erase(it);

        m_onCalled(ji);
      }
    }
  }
}

template <class ODataT> void HttpClientA<ODataT>::kick() {

  if (!m_iskicking)
    m_iskicking = true;
  else
    return;

  int retval;
  int still_running;
  do {

    fd_set readfds;
    fd_set writefds;
    fd_set excfds;

    FD_ZERO(&readfds);
    FD_ZERO(&writefds);
    FD_ZERO(&excfds);

    int max_fd;

    curl_multi_fdset(m_curl, &readfds, &writefds, &excfds, &max_fd);

    struct timeval tv;
    tv.tv_sec = 0;
    tv.tv_usec = m_settings.select_interval_usecs;

    retval = select(max_fd + 1, &readfds, &writefds, &excfds, &tv);

    if (retval != -1)
      curl_multi_perform(m_curl, &still_running);

  } while (still_running);

  performTransfers();

  m_iskicking = false;
}

template <class ODataT> int HttpClientA<ODataT>::getRequestsCount() {

  return m_e_curls.size();
}
